// Script para debugar o erro de exclus√£o de testes
// Execute este script no terminal para identificar o problema

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('=== Debug do Erro de Exclus√£o ===');
console.log('Supabase URL:', supabaseUrl);
console.log('Service Key presente:', !!supabaseServiceKey);

async function debugDeleteError() {
  try {
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    
    // 1. Verificar se h√° testes para testar
    console.log('\n1Ô∏è‚É£ Verificando testes existentes...');
    const { data: tests, error: listError } = await supabase
      .from('performance_tests')
      .select('id, user_id, test_date, test_type, evaluatees(name)')
      .limit(3);
    
    if (listError) {
      console.error('‚ùå Erro ao listar testes:', listError);
      return;
    }
    
    console.log(`‚úÖ Encontrados ${tests?.length || 0} testes`);
    
    if (!tests || tests.length === 0) {
      console.log('‚ùå Nenhum teste encontrado para debugar');
      return;
    }
    
    // 2. Simular o erro que est√° acontecendo
    console.log('\n2Ô∏è‚É£ Simulando o erro da fun√ß√£o deleteTest...');
    
    const testToDebug = tests[0];
    console.log('Teste para debug:', {
      id: testToDebug.id,
      user_id: testToDebug.user_id,
      test_type: testToDebug.test_type,
      evaluatee: testToDebug.evaluatees?.name
    });
    
    // 3. Testar diferentes cen√°rios
    console.log('\n3Ô∏è‚É£ Testando diferentes tipos de par√¢metros...');
    
    // Cen√°rio 1: FormData correto
    console.log('\nüìã Cen√°rio 1: FormData correto');
    try {
      // Simular FormData (n√£o podemos usar FormData no Node.js, mas podemos simular)
      const mockFormData = {
        get: (key) => {
          if (key === 'id') return testToDebug.id;
          return null;
        }
      };
      
      console.log('‚úÖ FormData simulado criado');
      console.log('ID extra√≠do:', mockFormData.get('id'));
      
      // Testar se o m√©todo get funciona
      if (typeof mockFormData.get === 'function') {
        console.log('‚úÖ M√©todo .get() est√° dispon√≠vel');
      } else {
        console.log('‚ùå M√©todo .get() N√ÉO est√° dispon√≠vel');
      }
      
    } catch (error) {
      console.error('‚ùå Erro no cen√°rio 1:', error);
    }
    
    // Cen√°rio 2: Objeto simples (que causaria o erro)
    console.log('\nüìã Cen√°rio 2: Objeto simples (que causaria erro)');
    try {
      const wrongData = { id: testToDebug.id };
      
      console.log('Objeto criado:', wrongData);
      
      // Tentar usar .get() em um objeto simples
      if (typeof wrongData.get === 'function') {
        console.log('‚úÖ M√©todo .get() est√° dispon√≠vel (inesperado)');
      } else {
        console.log('‚ùå M√©todo .get() N√ÉO est√° dispon√≠vel (esperado - causaria o erro)');
      }
      
    } catch (error) {
      console.error('‚ùå Erro no cen√°rio 2:', error);
    }
    
    // 4. Verificar a estrutura da fun√ß√£o deleteTest
    console.log('\n4Ô∏è‚É£ Analisando poss√≠veis causas do erro...');
    
    console.log('\nüîç Poss√≠veis causas:');
    console.log('1. A fun√ß√£o deleteTest est√° recebendo um objeto ao inv√©s de FormData');
    console.log('2. H√° algum middleware ou interceptador modificando o par√¢metro');
    console.log('3. O Next.js n√£o est√° processando corretamente a Server Action');
    console.log('4. H√° conflito de tipos entre cliente e servidor');
    
    // 5. Testar exclus√£o direta no banco
    console.log('\n5Ô∏è‚É£ Testando exclus√£o direta no banco...');
    
    // N√£o vamos excluir de verdade, apenas simular
    console.log('Simulando exclus√£o para teste:', testToDebug.id);
    
    const { error: deleteError } = await supabase
      .from('performance_tests')
      .select('id') // Usar select ao inv√©s de delete para n√£o excluir de verdade
      .eq('id', testToDebug.id)
      .eq('user_id', testToDebug.user_id);
    
    if (deleteError) {
      console.error('‚ùå Erro na consulta de teste:', deleteError);
    } else {
      console.log('‚úÖ Consulta de teste bem-sucedida (exclus√£o funcionaria)');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral no debug:', error);
  }
}

// 6. Verificar logs do servidor
console.log('\n6Ô∏è‚É£ Dicas para resolver o problema:');
console.log('1. Verifique se o TestCard est√° passando FormData corretamente');
console.log('2. Verifique se h√° algum middleware interceptando a requisi√ß√£o');
console.log('3. Verifique se a fun√ß√£o deleteTest est√° sendo importada corretamente');
console.log('4. Verifique os logs do servidor Next.js para mais detalhes');

debugDeleteError();