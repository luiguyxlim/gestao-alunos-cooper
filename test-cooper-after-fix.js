import { createClient } from '@supabase/supabase-js';

// Configura√ß√£o do Supabase
const supabaseUrl = 'https://lwscabmoibokzsvpaogm.supabase.co'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imx3c2NhYm1vaWJva3pzdnBhb2dtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTI5ODE0MCwiZXhwIjoyMDcwODc0MTQwfQ.VmBhMD22-7zPvVXJULcnoplMF-0QnA8EbOC4Y0ophK4'

const supabase = createClient(supabaseUrl, supabaseKey)

// Simular a fun√ß√£o getCooperTestsByStudent
async function getCooperTestsByStudent(userId, evaluateeId) {
  const { data, error } = await supabase
    .from('performance_tests')
    .select('*')
    .eq('user_id', userId)
    .eq('evaluatee_id', evaluateeId)
    .eq('test_type', 'cooper_vo2')
    .not('cooper_test_distance', 'is', null)
    .order('test_date', { ascending: false })

  if (error) {
    console.error('Erro ao buscar testes:', error)
    return []
  }

  return data || []
}

async function testCooperFunctionality() {
  console.log('üß™ Testando funcionalidade de testes de Cooper ap√≥s corre√ß√£o\n')
  
  try {
    // 1. Buscar avaliandos ativos
    console.log('1Ô∏è‚É£ Buscando avaliandos ativos:')
    const { data: evaluatees, error: evaluateesError } = await supabase
      .from('evaluatees')
      .select('*')
      .eq('active', true)
      .order('name')

    if (evaluateesError) {
      console.error('‚ùå Erro ao buscar avaliandos:', evaluateesError)
      return
    }

    console.log(`‚úÖ Encontrados ${evaluatees.length} avaliandos ativos:`)
    evaluatees.forEach(evaluatee => {
      console.log(`   - ${evaluatee.name} (ID: ${evaluatee.id}, User ID: ${evaluatee.user_id})`)
    })
    console.log('')

    // 2. Testar a fun√ß√£o getCooperTestsByStudent para cada avaliando
    console.log('2Ô∏è‚É£ Testando fun√ß√£o getCooperTestsByStudent:')
    
    for (const evaluatee of evaluatees) {
      console.log(`üîç Testando para ${evaluatee.name}:`)
      
      const cooperTests = await getCooperTestsByStudent(evaluatee.user_id, evaluatee.id)
      
      if (cooperTests.length > 0) {
        console.log(`   ‚úÖ Encontrados ${cooperTests.length} testes de Cooper:`)
        cooperTests.forEach(test => {
          console.log(`      - Teste ID: ${test.id}`)
          console.log(`        Data: ${test.test_date}`)
          console.log(`        Dist√¢ncia: ${test.cooper_test_distance}m`)
          console.log(`        User ID: ${test.user_id}`)
          console.log(`        Evaluatee ID: ${test.evaluatee_id}`)
          console.log('')
        })
      } else {
        console.log(`   ‚ö†Ô∏è  Nenhum teste de Cooper encontrado`)
      }
      console.log('')
    }

    // 3. Verificar especificamente o caso do Mois√©s
    console.log('3Ô∏è‚É£ Verifica√ß√£o espec√≠fica para MOISES SANTA ROSA:')
    const moises = evaluatees.find(e => e.name.includes('MOISES'))
    
    if (moises) {
      console.log(`üéØ Testando para ${moises.name}:`)
      console.log(`   User ID: ${moises.user_id}`)
      console.log(`   Evaluatee ID: ${moises.id}`)
      
      const moisesTests = await getCooperTestsByStudent(moises.user_id, moises.id)
      
      if (moisesTests.length > 0) {
        console.log(`   ‚úÖ SUCESSO! Encontrados ${moisesTests.length} testes de Cooper para Mois√©s`)
        console.log('   üìä Detalhes dos testes:')
        moisesTests.forEach((test, index) => {
          console.log(`      Teste ${index + 1}:`)
          console.log(`        - ID: ${test.id}`)
          console.log(`        - Data: ${test.test_date}`)
          console.log(`        - Dist√¢ncia: ${test.cooper_test_distance}m`)
          console.log(`        - VO2 Max: ${test.cooper_vo2_max || 'N/A'}`)
        })
      } else {
        console.log(`   ‚ùå PROBLEMA! Nenhum teste encontrado para Mois√©s`)
      }
    } else {
      console.log('   ‚ö†Ô∏è  Avaliando Mois√©s n√£o encontrado')
    }

    console.log('\nüéâ Teste conclu√≠do!')
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error)
  }
}

testCooperFunctionality().catch(console.error)