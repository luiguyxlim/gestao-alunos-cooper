// Script para debugar problemas de exclus√£o de testes
// Execute este script no console do navegador na p√°gina de testes

console.log('üîç [DEBUG] Iniciando debug da exclus√£o de testes...');

// Interceptar todas as requisi√ß√µes fetch
const originalFetch = window.fetch;
window.fetch = function(...args) {
  console.log('üåê [FETCH] Requisi√ß√£o interceptada:', args[0], args[1]);
  
  return originalFetch.apply(this, args)
    .then(response => {
      console.log('üì• [FETCH] Resposta recebida:', {
        url: args[0],
        status: response.status,
        statusText: response.statusText,
        headers: Object.fromEntries(response.headers.entries())
      });
      
      // Clone a resposta para poder ler o corpo
      const clonedResponse = response.clone();
      
      // Tentar ler o corpo da resposta
      clonedResponse.text().then(text => {
        console.log('üìÑ [FETCH] Corpo da resposta:', text);
      }).catch(err => {
        console.log('‚ùå [FETCH] Erro ao ler corpo da resposta:', err);
      });
      
      return response;
    })
    .catch(error => {
      console.error('‚ùå [FETCH] Erro na requisi√ß√£o:', error);
      throw error;
    });
};

// Interceptar erros globais
window.addEventListener('error', (event) => {
  console.error('‚ùå [ERROR] Erro global capturado:', event.error);
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('‚ùå [PROMISE] Promise rejeitada n√£o tratada:', event.reason);
});

// Fun√ß√£o para verificar autentica√ß√£o
function checkAuthentication() {
  console.log('üîê [AUTH] Verificando autentica√ß√£o...');
  
  // Verificar cookies
  const cookies = document.cookie.split(';').reduce((acc, cookie) => {
    const [key, value] = cookie.trim().split('=');
    acc[key] = value;
    return acc;
  }, {});
  
  console.log('üç™ [AUTH] Cookies encontrados:', Object.keys(cookies));
  
  // Procurar por cookies do Supabase
  const supabaseCookies = Object.keys(cookies).filter(key => 
    key.includes('supabase') || key.includes('sb-')
  );
  
  console.log('üîë [AUTH] Cookies do Supabase:', supabaseCookies);
  
  // Verificar localStorage
  const localStorageKeys = Object.keys(localStorage).filter(key => 
    key.includes('supabase') || key.includes('sb-')
  );
  
  console.log('üíæ [AUTH] LocalStorage do Supabase:', localStorageKeys);
  
  // Verificar sessionStorage
  const sessionStorageKeys = Object.keys(sessionStorage).filter(key => 
    key.includes('supabase') || key.includes('sb-')
  );
  
  console.log('üìù [AUTH] SessionStorage do Supabase:', sessionStorageKeys);
}

// Fun√ß√£o para testar exclus√£o manualmente
function testDeleteFunction(testId) {
  console.log(`üß™ [TEST] Testando exclus√£o do teste: ${testId}`);
  
  // Simular uma requisi√ß√£o DELETE
  fetch(`/api/tests/${testId}`, {
    method: 'DELETE',
    headers: {
      'Content-Type': 'application/json',
    },
  })
  .then(response => {
    console.log('‚úÖ [TEST] Resposta da exclus√£o:', response);
    return response.text();
  })
  .then(text => {
    console.log('üìÑ [TEST] Corpo da resposta:', text);
  })
  .catch(error => {
    console.error('‚ùå [TEST] Erro na exclus√£o:', error);
  });
}

// Fun√ß√£o para monitorar cliques nos bot√µes de exclus√£o
function monitorDeleteButtons() {
  console.log('üëÄ [MONITOR] Monitorando bot√µes de exclus√£o...');
  
  // Encontrar todos os bot√µes de exclus√£o
  const deleteButtons = document.querySelectorAll('button[class*="red"]');
  console.log(`üî¥ [MONITOR] Encontrados ${deleteButtons.length} bot√µes de exclus√£o`);
  
  deleteButtons.forEach((button, index) => {
    button.addEventListener('click', (event) => {
      console.log(`üî¥ [MONITOR] Bot√£o de exclus√£o ${index} clicado:`, {
        button: button,
        event: event,
        disabled: button.disabled,
        textContent: button.textContent
      });
    });
  });
}

// Fun√ß√£o para verificar se h√° Server Actions sendo executadas
function monitorServerActions() {
  console.log('‚ö° [SERVER] Monitorando Server Actions...');
  
  // Interceptar submiss√µes de formul√°rios
  document.addEventListener('submit', (event) => {
    console.log('üìã [SERVER] Formul√°rio submetido:', {
      form: event.target,
      action: event.target.action,
      method: event.target.method,
      formData: new FormData(event.target)
    });
  });
}

// Executar verifica√ß√µes iniciais
checkAuthentication();
monitorDeleteButtons();
monitorServerActions();

console.log('‚úÖ [DEBUG] Debug configurado! Agora tente excluir um teste.');
console.log('üí° [DEBUG] Comandos dispon√≠veis:');
console.log('  - checkAuthentication(): Verificar autentica√ß√£o');
console.log('  - testDeleteFunction(testId): Testar exclus√£o manual');
console.log('  - monitorDeleteButtons(): Re-monitorar bot√µes');

// Exportar fun√ß√µes para uso manual
window.debugDelete = {
  checkAuthentication,
  testDeleteFunction,
  monitorDeleteButtons,
  monitorServerActions
};